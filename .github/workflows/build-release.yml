name: Build Arcane Agent

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  BINARY_NAME: arcane-agent
  GO_VERSION: "1.24.3"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests (no Docker required)
        run: |
          go test -v ./internal/config/...
          go test -v ./internal/agent/...
          go test -v ./pkg/types/...
          go test -v ./cmd/agent/...

      - name: Run tests with coverage
        run: go test -v -coverprofile=coverage.out ./internal/config/... ./internal/agent/... ./pkg/types/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          fail_ci_if_error: false

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Test build compiles
        run: |
          go build -v ./cmd/agent
          ./arcane-agent --help || echo "Binary built successfully"

  version-check:
    name: Check Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      should_release: ${{ steps.version.outputs.should_release }}
      new_version: ${{ steps.version.outputs.new_version }}
      release_type: ${{ steps.version.outputs.release_type }}
      changelog: ${{ steps.version.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for conventional commits

      - name: Determine version bump
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Extract current version (remove 'v' prefix)
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "Current version: $CURRENT_VERSION"

          # Function to increment version
          increment_version() {
              local version=$1
              local part=$2
              IFS='.' read -r -a parts <<<"$version"
              case $part in
                  "major")
                      parts[0]=$((parts[0] + 1))
                      parts[1]=0
                      parts[2]=0
                      ;;
                  "minor")
                      parts[1]=$((parts[1] + 1))
                      parts[2]=0
                      ;;
                  "patch")
                      parts[2]=$((parts[2] + 1))
                      ;;
              esac
              echo "${parts[0]}.${parts[1]}.${parts[2]}"
          }

          # Check for breaking changes (major version bump)
          if git log "$LATEST_TAG"..HEAD --oneline | grep -E "BREAKING CHANGE|feat!:|fix!:" | grep -q .; then
              RELEASE_TYPE="major"
              echo "Found breaking changes - major release"
          # Check for new features (minor version bump)
          elif git log "$LATEST_TAG"..HEAD --oneline | grep -E "feat(\(.*\))?:" | grep -q .; then
              RELEASE_TYPE="minor"
              echo "Found new features - minor release"
          # Check for bug fixes (patch version bump)
          elif git log "$LATEST_TAG"..HEAD --oneline | grep -E "fix(\(.*\))?:" | grep -q .; then
              RELEASE_TYPE="patch"
              echo "Found bug fixes - patch release"
          else
              echo "No conventional commits found - no release needed"
              echo "should_release=false" >> $GITHUB_OUTPUT
              exit 0
          fi

          # Calculate new version
          NEW_VERSION=$(increment_version $CURRENT_VERSION $RELEASE_TYPE)
          echo "New version: $NEW_VERSION"

          # Generate changelog from conventional commits
          CHANGELOG=$(git log "$LATEST_TAG"..HEAD --pretty=format:"- %s" --grep="feat\|fix\|BREAKING" | head -20)
          if [ -z "$CHANGELOG" ]; then
              CHANGELOG="- Various improvements and bug fixes"
          fi

          # Set outputs
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: darwin
            goarch: amd64
            platform: darwin-amd64
          - goos: darwin
            goarch: arm64
            platform: darwin-arm64
          - goos: windows
            goarch: amd64
            platform: windows-amd64
            extension: .exe

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF_NAME#v}
          elif [ -f .version ]; then
            VERSION=$(cat .version)
          else
            VERSION="dev-${GITHUB_SHA::8}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p bin
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          go build -v -ldflags="-w -s \
            -X github.com/ofkm/arcane-agent/internal/version.Version=${{ steps.version.outputs.VERSION }} \
            -X github.com/ofkm/arcane-agent/internal/version.Commit=${GITHUB_SHA} \
            -X github.com/ofkm/arcane-agent/internal/version.Date=${BUILD_DATE}" \
            -o bin/${{ env.BINARY_NAME }}-${{ matrix.platform }}${{ matrix.extension }} \
            ./cmd/agent

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.platform }}
          path: bin/${{ env.BINARY_NAME }}-${{ matrix.platform }}${{ matrix.extension }}
          retention-days: 30

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/ofkm/arcane-agent
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: [test, build, version-check]
    if: needs.version-check.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create version tag
        env:
          NEW_VERSION: ${{ needs.version-check.outputs.new_version }}
        run: |
          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              cp "$dir"/* "release/" 2>/dev/null || true
            fi
          done
          ls -la release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-check.outputs.new_version }}
          name: Release v${{ needs.version-check.outputs.new_version }}
          body: |
            ## Changes in v${{ needs.version-check.outputs.new_version }}

            This is a **${{ needs.version-check.outputs.release_type }}** release.

            ### 🚀 Changes:
            ${{ needs.version-check.outputs.changelog }}

            ### 📦 Download Assets

            **Binaries:**
            - `arcane-agent-linux-amd64` - Linux x86_64
            - `arcane-agent-linux-arm64` - Linux ARM64
            - `arcane-agent-darwin-amd64` - macOS Intel
            - `arcane-agent-darwin-arm64` - macOS Apple Silicon
            - `arcane-agent-windows-amd64.exe` - Windows x86_64

            **Docker Images:**
            ```bash
            # Latest version
            docker pull ghcr.io/ofkm/arcane-agent:v${{ needs.version-check.outputs.new_version }}

            # Version tags
            docker pull ghcr.io/ofkm/arcane-agent:${{ needs.version-check.outputs.new_version }}
            docker pull ghcr.io/ofkm/arcane-agent:latest

            # Multi-architecture support (linux/amd64, linux/arm64)
            ```

            ### 🐳 Quick Start with Docker
            ```bash
            # Run the agent
            docker run -d --name arcane-agent \
              -e ARCANE_HOST=your-server.com \
              -e ARCANE_PORT=3000 \
              -e AGENT_ID=my-agent \
              -v /var/run/docker.sock:/var/run/docker.sock \
              ghcr.io/ofkm/arcane-agent:v${{ needs.version-check.outputs.new_version }}
            ```

            ### 📋 Installation
            ```bash
            # Download and install (Linux/macOS)
            curl -L https://github.com/ofkm/arcane-agent/releases/download/v${{ needs.version-check.outputs.new_version }}/arcane-agent-linux-amd64 -o arcane-agent
            chmod +x arcane-agent
            ./arcane-agent --help
            ```
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manual-release:
    name: Manual Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              cp "$dir"/* "release/" 2>/dev/null || true
            fi
          done
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
